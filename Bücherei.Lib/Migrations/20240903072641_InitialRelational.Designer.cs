// <auto-generated />
using Bücherei.Lib.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Bücherei.Lib.Migrations
{
    [DbContext(typeof(RelationalContext))]
    [Migration("20240903072641_InitialRelational")]
    partial class InitialRelational
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AutorBuechereiRel", b =>
                {
                    b.Property<int>("AutorenId")
                        .HasColumnType("integer");

                    b.Property<int>("BuechereienId")
                        .HasColumnType("integer");

                    b.HasKey("AutorenId", "BuechereienId");

                    b.HasIndex("BuechereienId");

                    b.ToTable("AutorBuechereiRel");
                });

            modelBuilder.Entity("Bücherei.Lib.EntitiesRelational.Autor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nachname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Vorname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("autoren", (string)null);
                });

            modelBuilder.Entity("Bücherei.Lib.EntitiesRelational.Buch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AutorId")
                        .HasColumnType("integer");

                    b.Property<string>("Titel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AutorId");

                    b.ToTable("buecher", (string)null);
                });

            modelBuilder.Entity("Bücherei.Lib.EntitiesRelational.BuechereiRel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("buechereien", (string)null);
                });

            modelBuilder.Entity("AutorBuechereiRel", b =>
                {
                    b.HasOne("Bücherei.Lib.EntitiesRelational.Autor", null)
                        .WithMany()
                        .HasForeignKey("AutorenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bücherei.Lib.EntitiesRelational.BuechereiRel", null)
                        .WithMany()
                        .HasForeignKey("BuechereienId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Bücherei.Lib.EntitiesRelational.Buch", b =>
                {
                    b.HasOne("Bücherei.Lib.EntitiesRelational.Autor", "Autor")
                        .WithMany("Buecher")
                        .HasForeignKey("AutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autor");
                });

            modelBuilder.Entity("Bücherei.Lib.EntitiesRelational.Autor", b =>
                {
                    b.Navigation("Buecher");
                });
#pragma warning restore 612, 618
        }
    }
}
